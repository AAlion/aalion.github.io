{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1584374928360},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1584374927859},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1584374927858},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1584374927861},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1584374927862},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1584374927865},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1584374927864},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1584374927863},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1584374927866},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1584374927868},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1584374927869},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1584374927870},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1584374927998},{"_id":"themes/next/_config.yml","hash":"d931e22d91699c9909d6297ad3b9c638348781ee","modified":1584374928361},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1584374927871},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1584374927873},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1584374927898},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1584374927941},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1584374927942},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1584374927943},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1584374927945},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1584374927947},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1584374927946},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1584374927948},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1584374927877},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1584374927878},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1584374927876},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1584374927874},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1584374927882},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1584374927881},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1584374927883},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1584374927879},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1584374927885},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1584374927884},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1584374927887},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1584374927889},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1584374927893},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1584374928000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1584374928001},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1584374927890},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1584374927891},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1584374927888},{"_id":"source/_posts/Leetcode-2-Add-Two-Numbers.md","hash":"59e77bfbfa9bc33e7d2de1ba94778d3d10b9e6d5","modified":1584373251826},{"_id":"source/_posts/Leetcode-313-Super-Ugly-Number.md","hash":"7ef8d4c046af9a13737fc39703273e86e8e4a1d7","modified":1584373722234},{"_id":"source/_posts/Leetcode-39-Combination-Sum-1.md","hash":"ba59282da7c32d955596da7596de0c6dcf894509","modified":1584373474904},{"_id":"source/_posts/Leetcode-49-Group-Anagrams.md","hash":"888ec10d692517a8579b8dc8e140e3c746847d58","modified":1584373588432},{"_id":"source/_posts/Leetcode-56-Merge-Intervals.md","hash":"6b2d62b18fc8b4c5977f3ecc19dbfd16e5741eb1","modified":1584373666374},{"_id":"source/about/index.md","hash":"70f3ac1a77f71097d4c803f9b66ec29a323baa57","modified":1584373950907},{"_id":"source/categories/index.md","hash":"94cceca15b884393a13c704f166ede65456b6cba","modified":1584374418595},{"_id":"source/tags/index.md","hash":"acd0c8b28ddd2ff39d4687bb0692ad500ac88c25","modified":1584374403987},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1584374927857},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1584374927855},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1584374927895},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1584374927854},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1584374927901},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1584374927897},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1584374927903},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1584374927900},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1584374927902},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1584374927906},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1584374927905},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1584374927909},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1584374927908},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1584374927910},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1584374927914},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1584374927916},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1584374927917},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1584374927918},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1584374927930},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1584374927931},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1584374927940},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1584374927950},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1584374927951},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1584374927953},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1584374927954},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584374928174},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1584374928003},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1584374928004},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1584374928005},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1584374928006},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1584374928008},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1584374928009},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1584374928010},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1584374928011},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1584374927955},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1584374928013},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1584374927958},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1584374927956},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1584374928178},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1584374928177},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1584374928172},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1584374928176},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1584374928181},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1584374928180},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1584374928182},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1584374928183},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1584374928188},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1584374928185},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1584374928190},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1584374928187},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1584374928186},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1584374928191},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1584374928193},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1584374928197},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1584374928192},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1584374928195},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584374927936},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584374927937},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1584374928196},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584374928123},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584374928124},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584374928128},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584374928167},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584374928171},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1584374927912},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1584374927913},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1584374927920},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1584374927921},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1584374927922},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1584374927924},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1584374927926},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1584374927933},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1584374927925},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1584374927935},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1584374927928},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1584374927969},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1584374927938},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1584374927972},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1584374927970},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1584374927973},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1584374927974},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1584374927976},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1584374927977},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1584374927980},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1584374927978},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1584374927981},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1584374927984},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1584374927982},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1584374927988},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1584374927985},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1584374927991},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1584374927989},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1584374927993},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1584374927994},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1584374927992},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1584374927997},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1584374927996},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1584374927963},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1584374927987},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1584374927965},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1584374928121},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1584374927967},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1584374928122},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1584374927964},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1584374928126},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1584374928127},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1584374928166},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1584374928169},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1584374928165},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1584374928170},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1584374928201},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1584374928200},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1584374928202},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1584374928206},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1584374928205},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1584374928203},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1584374928207},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1584374928208},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1584374928211},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1584374928213},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1584374928214},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1584374928216},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1584374928233},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1584374928231},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1584374928235},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1584374928236},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1584374928260},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1584374928261},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1584374928262},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1584374928264},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1584374928270},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1584374928269},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1584374928272},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1584374928274},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1584374928273},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1584374928296},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1584374928295},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1584374928299},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1584374928297},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1584374928300},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1584374928301},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1584374928303},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1584374928305},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1584374928306},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1584374928308},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1584374928311},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1584374928309},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1584374928312},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1584374928313},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1584374928315},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1584374928320},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1584374928319},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1584374928316},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1584374928317},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1584374928292},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1584374928321},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1584374928324},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1584374928323},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1584374928325},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1584374928327},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1584374928328},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1584374928337},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1584374928330},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1584374928338},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1584374928342},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1584374928341},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1584374928344},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1584374928293},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1584374928018},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1584374927960},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1584374928016},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1584374927962},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1584374928019},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1584374928022},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1584374928020},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1584374928045},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1584374928110},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1584374928112},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1584374928081},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1584374928113},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1584374928115},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1584374928116},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1584374928118},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1584374928119},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1584374928148},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1584374928149},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1584374928151},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1584374928153},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1584374928150},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1584374928134},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1584374928135},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1584374928137},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1584374928138},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1584374928141},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1584374928131},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1584374928139},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1584374928156},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1584374928158},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1584374928159},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1584374928160},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1584374928162},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1584374928163},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1584374928210},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1584374928350},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1584374928238},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1584374928241},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1584374928239},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1584374928242},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1584374928349},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1584374928243},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1584374928245},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1584374928255},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1584374928142},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1584374928258},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1584374928257},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1584374928266},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1584374928267},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1584374928276},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1584374928277},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1584374928279},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1584374928335},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1584374928334},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1584374928346},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1584374928347},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1584374928289},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1584374928290},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1584374928340},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1584374928024},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1584374928027},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1584374928026},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1584374928030},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1584374928028},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1584374928031},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1584374928033},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1584374928034},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1584374928036},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1584374928038},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1584374928041},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1584374928039},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1584374928042},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1584374928047},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1584374928043},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1584374928048},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1584374928049},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1584374928051},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1584374928054},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1584374928052},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1584374928055},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1584374928056},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1584374928059},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1584374928058},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1584374928060},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1584374928062},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1584374928064},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1584374928063},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1584374928066},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1584374928068},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1584374928071},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1584374928069},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1584374928072},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1584374928073},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1584374928075},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1584374928077},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1584374928076},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1584374928079},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1584374928080},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1584374928096},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1584374928098},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1584374928099},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1584374928100},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1584374928103},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1584374928102},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1584374928104},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1584374928106},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1584374928108},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1584374928107},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1584374928083},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1584374928086},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1584374928088},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1584374928085},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1584374928089},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1584374928092},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1584374928093},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1584374928090},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1584374928094},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1584374928352},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1584374928144},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1584374928353},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1584374928355},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1584374928146},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1584374928247},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1584374928356},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1584374928358},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1584374928248},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1584374928250},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1584374928252},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1584374928281},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1584374928288},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1584374928251},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1584374928254},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1584374928155},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1584374928284},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1584374928229},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1584374928331},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1584374928286},{"_id":"public/about/index.html","hash":"3d21f26cd92b30c8a35439b86efe1e8dff659bbe","modified":1584374992610},{"_id":"public/tags/index.html","hash":"ff84f35f192eb3c1a2879aee009c6118387082e4","modified":1584374992610},{"_id":"public/categories/index.html","hash":"c956ccfdd25ad72b866011160d16fe2b2dc7035a","modified":1584374992610},{"_id":"public/categories/算法/index.html","hash":"8e78a687744b11d6159bac19a331ccfb6da4623f","modified":1584374992610},{"_id":"public/tags/leetcode/index.html","hash":"08841616304d036b3da760501bde7a4787505dac","modified":1584374992610},{"_id":"public/tags/算法/index.html","hash":"fc8e48355086995f1f9e51f13da15bfba83aa032","modified":1584374992610},{"_id":"public/tags/Linked-List/index.html","hash":"48aee9efc937f32d07f17a932e85c548705ebae7","modified":1584374992610},{"_id":"public/tags/backtracking/index.html","hash":"b32efdb5ceb6150d926b16a3ed866bd33d5bcb9b","modified":1584374992610},{"_id":"public/tags/Leetcode/index.html","hash":"d4c703835a989c6a6195e410b02ed23920987a47","modified":1584374992610},{"_id":"public/tags/313/index.html","hash":"d665982ef6ad9e85813ce18733c6699295cb60a0","modified":1584374992610},{"_id":"public/tags/哈希表/index.html","hash":"06a2c9b338309fb8ab5a19196ca63a3684cdd408","modified":1584374992610},{"_id":"public/tags/字符串/index.html","hash":"fd0bbe0688dd96da96b72ed996a8893f4b2fbc38","modified":1584374992610},{"_id":"public/tags/56/index.html","hash":"4142dede269c429b67d2ce35fc060a189fcbd024","modified":1584374992610},{"_id":"public/tags/Array/index.html","hash":"aae600e6d1485e491f6536bcc81628a705a388a8","modified":1584374992610},{"_id":"public/archives/index.html","hash":"50b91740f9104499d91c85c248f65fec6f83b73e","modified":1584374992610},{"_id":"public/archives/2018/index.html","hash":"aaf6e81b22e70d49642d2c4775e4bfae488631e3","modified":1584374992610},{"_id":"public/archives/2018/08/index.html","hash":"8d0b3ae19f73d1fcf91a911b37000ca7c36b9220","modified":1584374992610},{"_id":"public/archives/2018/09/index.html","hash":"5a8f8ad7c1d27385778db26e780f49feeeb285fb","modified":1584374992610},{"_id":"public/2018/09/25/Leetcode-2-Add-Two-Numbers/index.html","hash":"f576aee9fdb3b9a49c7d8189acaf29041cd135ad","modified":1584374992610},{"_id":"public/2018/09/05/Leetcode-39-Combination-Sum-1/index.html","hash":"7f212d1ae631469c9115794ba8d664cea7f39901","modified":1584374992610},{"_id":"public/2018/08/02/Leetcode-49-Group-Anagrams/index.html","hash":"71ad00552532d7901ce641d441534fd52cf73a88","modified":1584374992610},{"_id":"public/2018/08/24/Leetcode-56-Merge-Intervals/index.html","hash":"cac0f830f05b45ff4d44891daeab71fa4344928d","modified":1584374992610},{"_id":"public/2018/08/22/Leetcode-313-Super-Ugly-Number/index.html","hash":"715e5b1ee6ec239da0ce102f268f1e231adfc30c","modified":1584374992610},{"_id":"public/index.html","hash":"1d2770c7b491dc68a6a5c8b6cae839f3887a5450","modified":1584374992610},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1584374992610},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1584374992610},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1584374992610},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1584374992610},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1584374992610},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1584374992610},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1584374992610},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1584374992610},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1584374992610},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1584374992610},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1584374992610},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1584374992610},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1584374992610},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1584374992610},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1584374992610},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1584374992610},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1584374992610},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1584374992610},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1584374992610},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1584374992610},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1584374992610},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1584374992610},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1584374992610},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1584374992610},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1584374992610},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1584374992610},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1584374992610},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1584374992610},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1584374992610},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1584374992610},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1584374992610},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1584374992610},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1584374992610},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1584374992610},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1584374992610},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1584374992610},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1584374992610},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1584374992610},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1584374992610},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1584374992610},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1584374992610},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1584374992610},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1584374992610},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1584374992610},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1584374992610},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1584374992610},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1584374992610},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1584374992610},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1584374992610},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1584374992610},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1584374992610},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1584374992610},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1584374992610},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1584374992610},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1584374992610},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1584374992610},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1584374992610},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1584374992610},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1584374992610},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1584374992610},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1584374992610},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1584374992610},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1584374992610},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1584374992610},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1584374992610},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1584374992610},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1584374992610},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1584374992610},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1584374992610},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1584374992610},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1584374992610},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1584374992610},{"_id":"public/css/main.css","hash":"5f3ee055da9e4747312caf766c262b8279948bde","modified":1584374992610},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1584374992610},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1584374992610},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1584374992610},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1584374992610},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1584374992610},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1584374992610},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1584374992610},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1584374992610},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1584374992610},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1584374992610},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1584374992610},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1584374992610},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1584374992610},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1584374992610},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1584374992610},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1584374992610},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1584374992610},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1584374992610},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1584374992610},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1584374992610},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1584374992610},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1584374992610},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1584374992610},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1584374992610}],"Category":[{"name":"算法","_id":"ck7unyp8f0004kkiy6ykfb399"}],"Data":[],"Page":[{"title":"","date":"2017-06-09T12:36:02.000Z","_content":"\n**Hanshi Song  (宋晗诗)**\n\nSenior R&D Engineer\n\nUser Profiling Group, Fuxi AI Lab, Netease Inc.\n\n### About Me\n\nI am currently a senior artificial intelligence engineer in NetEase Fuxi AI Lab, Hanzhou, China since 2019. I received the MA.Sc. degree and B.S. degree in Information Security from Xidian University.  My research interests include data mining and machine learning, with an emphasis on applying computational models to addressing matchmaking problems in game-related user personas. I focused on frontier research and technology transformation in online games and my work has been successfully applied to a number of important games in NetEase, such as: Justice PC, Ghosts PC, Ghosts Mobile, Fever Basketball, etc.\n\n","source":"about/index.md","raw":"title: \ndate: 2017-06-09 20:36:02\n---\n\n**Hanshi Song  (宋晗诗)**\n\nSenior R&D Engineer\n\nUser Profiling Group, Fuxi AI Lab, Netease Inc.\n\n### About Me\n\nI am currently a senior artificial intelligence engineer in NetEase Fuxi AI Lab, Hanzhou, China since 2019. I received the MA.Sc. degree and B.S. degree in Information Security from Xidian University.  My research interests include data mining and machine learning, with an emphasis on applying computational models to addressing matchmaking problems in game-related user personas. I focused on frontier research and technology transformation in online games and my work has been successfully applied to a number of important games in NetEase, such as: Justice PC, Ghosts PC, Ghosts Mobile, Fever Basketball, etc.\n\n","updated":"2020-03-16T15:52:30.907Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck7unyp8b0001kkiyh6fv3rue","content":"<p><strong>Hanshi Song  (宋晗诗)</strong></p>\n<p>Senior R&amp;D Engineer</p>\n<p>User Profiling Group, Fuxi AI Lab, Netease Inc.</p>\n<h3 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h3><p>I am currently a senior artificial intelligence engineer in NetEase Fuxi AI Lab, Hanzhou, China since 2019. I received the MA.Sc. degree and B.S. degree in Information Security from Xidian University.  My research interests include data mining and machine learning, with an emphasis on applying computational models to addressing matchmaking problems in game-related user personas. I focused on frontier research and technology transformation in online games and my work has been successfully applied to a number of important games in NetEase, such as: Justice PC, Ghosts PC, Ghosts Mobile, Fever Basketball, etc.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Hanshi Song  (宋晗诗)</strong></p>\n<p>Senior R&amp;D Engineer</p>\n<p>User Profiling Group, Fuxi AI Lab, Netease Inc.</p>\n<h3 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h3><p>I am currently a senior artificial intelligence engineer in NetEase Fuxi AI Lab, Hanzhou, China since 2019. I received the MA.Sc. degree and B.S. degree in Information Security from Xidian University.  My research interests include data mining and machine learning, with an emphasis on applying computational models to addressing matchmaking problems in game-related user personas. I focused on frontier research and technology transformation in online games and my work has been successfully applied to a number of important games in NetEase, such as: Justice PC, Ghosts PC, Ghosts Mobile, Fever Basketball, etc.</p>\n"},{"title":"tags","date":"2020-03-16T16:00:03.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-03-17 00:00:03\n---\n","updated":"2020-03-16T16:00:03.987Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck7unyp8f0003kkiye7e35ipx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-03-16T16:00:18.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-03-17 00:00:18\n---\n","updated":"2020-03-16T16:00:18.595Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck7unyp8h0007kkiy50sl35g3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Leetcode 2: Add Two Numbers","date":"2018-09-25T02:27:24.000Z","_content":"**难度：Medium**\n### 题目描述\n给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。\n\n你可以假设除了数字 0 之外，这两个数字都不会以零开头。\n\n<!--more-->\n\n### 示例\n```shell\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n```\n\n### 解题思路\n这道题考察的是链表的操作，平常我们加两个数都是从后往前加，而这个反过来即可，进位是往后面进位。\n\n### 解题代码\n```Java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        List<Integer> res = new ArrayList<>();\n        int p = 0;\n        while (l1 != null && l2 != null) {\n            int temp = l1.val + l2.val + p;\n            res.add(temp % 10);\n            p = temp / 10;\n            l1 = l1.next;\n            l2 = l2.next;\n        }\n        while (l1 != null) {\n            int temp = l1.val + p;\n            res.add(temp % 10);\n            p = temp / 10;\n            l1 = l1.next;\n        }\n        while (l2 != null) {\n            int temp = l2.val + p;\n            res.add(temp % 10);\n            p = temp / 10;\n            l2 = l2.next;\n        }\n        if (p != 0) {\n            res.add(p);\n        }\n        ListNode head = new ListNode(res.get(0));\n        ListNode ph = head;\n        for (int i = 1; i < res.size(); i++) {\n            ph.next = new ListNode(res.get(i));\n            ph = ph.next;\n        }\n        return head;\n    }\n}\n```","source":"_posts/Leetcode-2-Add-Two-Numbers.md","raw":"---\nlayout: post\ntitle: 'Leetcode 2: Add Two Numbers'\ncategories: 算法\ndate: 2018-09-25 10:27:24\ntags:\n    - leetcode\n    - 算法\n    - Linked List\n---\n**难度：Medium**\n### 题目描述\n给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。\n\n你可以假设除了数字 0 之外，这两个数字都不会以零开头。\n\n<!--more-->\n\n### 示例\n```shell\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n```\n\n### 解题思路\n这道题考察的是链表的操作，平常我们加两个数都是从后往前加，而这个反过来即可，进位是往后面进位。\n\n### 解题代码\n```Java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        List<Integer> res = new ArrayList<>();\n        int p = 0;\n        while (l1 != null && l2 != null) {\n            int temp = l1.val + l2.val + p;\n            res.add(temp % 10);\n            p = temp / 10;\n            l1 = l1.next;\n            l2 = l2.next;\n        }\n        while (l1 != null) {\n            int temp = l1.val + p;\n            res.add(temp % 10);\n            p = temp / 10;\n            l1 = l1.next;\n        }\n        while (l2 != null) {\n            int temp = l2.val + p;\n            res.add(temp % 10);\n            p = temp / 10;\n            l2 = l2.next;\n        }\n        if (p != 0) {\n            res.add(p);\n        }\n        ListNode head = new ListNode(res.get(0));\n        ListNode ph = head;\n        for (int i = 1; i < res.size(); i++) {\n            ph.next = new ListNode(res.get(i));\n            ph = ph.next;\n        }\n        return head;\n    }\n}\n```","slug":"Leetcode-2-Add-Two-Numbers","published":1,"updated":"2020-03-16T15:40:51.826Z","comments":1,"photos":[],"link":"","_id":"ck7unyp860000kkiy1mz186hu","content":"<p><strong>难度：Medium</strong></p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">输出：7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题考察的是链表的操作，平常我们加两个数都是从后往前加，而这个反过来即可，进位是往后面进位。</p>\n<h3 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = l1.val + l2.val + p;</span><br><span class=\"line\">            res.add(temp % <span class=\"number\">10</span>);</span><br><span class=\"line\">            p = temp / <span class=\"number\">10</span>;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = l1.val + p;</span><br><span class=\"line\">            res.add(temp % <span class=\"number\">10</span>);</span><br><span class=\"line\">            p = temp / <span class=\"number\">10</span>;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = l2.val + p;</span><br><span class=\"line\">            res.add(temp % <span class=\"number\">10</span>);</span><br><span class=\"line\">            p = temp / <span class=\"number\">10</span>;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res.add(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode head = <span class=\"keyword\">new</span> ListNode(res.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">        ListNode ph = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; res.size(); i++) &#123;</span><br><span class=\"line\">            ph.next = <span class=\"keyword\">new</span> ListNode(res.get(i));</span><br><span class=\"line\">            ph = ph.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><strong>难度：Medium</strong></p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>","more":"<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">输出：7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题考察的是链表的操作，平常我们加两个数都是从后往前加，而这个反过来即可，进位是往后面进位。</p>\n<h3 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = l1.val + l2.val + p;</span><br><span class=\"line\">            res.add(temp % <span class=\"number\">10</span>);</span><br><span class=\"line\">            p = temp / <span class=\"number\">10</span>;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = l1.val + p;</span><br><span class=\"line\">            res.add(temp % <span class=\"number\">10</span>);</span><br><span class=\"line\">            p = temp / <span class=\"number\">10</span>;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = l2.val + p;</span><br><span class=\"line\">            res.add(temp % <span class=\"number\">10</span>);</span><br><span class=\"line\">            p = temp / <span class=\"number\">10</span>;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res.add(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode head = <span class=\"keyword\">new</span> ListNode(res.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">        ListNode ph = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; res.size(); i++) &#123;</span><br><span class=\"line\">            ph.next = <span class=\"keyword\">new</span> ListNode(res.get(i));</span><br><span class=\"line\">            ph = ph.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Leetcode 39: Combination Sum","date":"2018-09-05T01:14:45.000Z","_content":"**难度：medium**\n### 题目描述\n给定一个无重复元素的数组candidates和一个目标数target ，找出candidates中所有可以使数字和为target的组合。\ncandidates中的数字可以无限制重复被选取。\n\n**说明：**\n* 所有数字（包括 target）都是正整数。\n* 解集不能包含重复的组合。\n<!--more-->\n\n### 示例\n\n**示例1**\n```shell\n输入: candidates = [2,3,6,7], target = 7,\n所求解集为:\n[\n  [7],\n  [2,2,3]\n]\n```\n**示例2**\n```shell\n输入: candidates = [2,3,5], target = 8,\n所求解集为:\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n```\n\n### 解题思路\n这道题的思路还是比较清晰的，就是用深度优先遍历+回溯，但是由于解集不能包含重复的组合，即每次遍历应该从当前位置开始，不包含之前的元素。这样才能保证不重复。\n\n### 解题代码\n```Java\nclass Solution {\n    List<List<Integer>> ans = new ArrayList<>();\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        for (int i = 0; i < candidates.length; i++) {\n            List<Integer> temp = new ArrayList<>();\n            temp.add(candidates[i]);\n            dfs(candidates, target - candidates[i], temp, i);\n        }\n        return ans;\n    }\n    \n    public void dfs(int[] candidates, int target, List<Integer> list, int start) {\n        if (target == 0) {\n            ans.add(list);\n            return;\n        }\n        if (target < 0) {\n            return;\n        }\n        for (int i = start; i < candidates.length; i++) {\n            List<Integer> temp = new ArrayList<>();\n            for (int k : list) {\n                temp.add(k);\n            }\n            temp.add(candidates[i]);\n            dfs(candidates, target - candidates[i], temp, i);\n        }\n    }\n}\n```\n","source":"_posts/Leetcode-39-Combination-Sum-1.md","raw":"---\nlayout: post\ntitle: 'Leetcode 39: Combination Sum'\ncategories: 算法\ndate: 2018-09-05 09:14:45\ntags:\n    - leetcode\n    - backtracking\n---\n**难度：medium**\n### 题目描述\n给定一个无重复元素的数组candidates和一个目标数target ，找出candidates中所有可以使数字和为target的组合。\ncandidates中的数字可以无限制重复被选取。\n\n**说明：**\n* 所有数字（包括 target）都是正整数。\n* 解集不能包含重复的组合。\n<!--more-->\n\n### 示例\n\n**示例1**\n```shell\n输入: candidates = [2,3,6,7], target = 7,\n所求解集为:\n[\n  [7],\n  [2,2,3]\n]\n```\n**示例2**\n```shell\n输入: candidates = [2,3,5], target = 8,\n所求解集为:\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n```\n\n### 解题思路\n这道题的思路还是比较清晰的，就是用深度优先遍历+回溯，但是由于解集不能包含重复的组合，即每次遍历应该从当前位置开始，不包含之前的元素。这样才能保证不重复。\n\n### 解题代码\n```Java\nclass Solution {\n    List<List<Integer>> ans = new ArrayList<>();\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        for (int i = 0; i < candidates.length; i++) {\n            List<Integer> temp = new ArrayList<>();\n            temp.add(candidates[i]);\n            dfs(candidates, target - candidates[i], temp, i);\n        }\n        return ans;\n    }\n    \n    public void dfs(int[] candidates, int target, List<Integer> list, int start) {\n        if (target == 0) {\n            ans.add(list);\n            return;\n        }\n        if (target < 0) {\n            return;\n        }\n        for (int i = start; i < candidates.length; i++) {\n            List<Integer> temp = new ArrayList<>();\n            for (int k : list) {\n                temp.add(k);\n            }\n            temp.add(candidates[i]);\n            dfs(candidates, target - candidates[i], temp, i);\n        }\n    }\n}\n```\n","slug":"Leetcode-39-Combination-Sum-1","published":1,"updated":"2020-03-16T15:44:34.904Z","comments":1,"photos":[],"link":"","_id":"ck7unyp8d0002kkiy8fo58jlr","content":"<p><strong>难度：medium</strong></p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个无重复元素的数组candidates和一个目标数target ，找出candidates中所有可以使数字和为target的组合。<br>candidates中的数字可以无限制重复被选取。</p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>所有数字（包括 target）都是正整数。</li>\n<li>解集不能包含重复的组合。<a id=\"more\"></a>\n\n</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><strong>示例1</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: candidates = [2,3,6,7], target = 7,</span><br><span class=\"line\">所求解集为:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [7],</span><br><span class=\"line\">  [2,2,3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>示例2</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: candidates = [2,3,5], target = 8,</span><br><span class=\"line\">所求解集为:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [2,2,2,2],</span><br><span class=\"line\">  [2,3,3],</span><br><span class=\"line\">  [3,5]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题的思路还是比较清晰的，就是用深度优先遍历+回溯，但是由于解集不能包含重复的组合，即每次遍历应该从当前位置开始，不包含之前的元素。这样才能保证不重复。</p>\n<h3 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; temp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            temp.add(candidates[i]);</span><br><span class=\"line\">            dfs(candidates, target - candidates[i], temp, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target, List&lt;Integer&gt; list, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans.add(list);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; temp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k : list) &#123;</span><br><span class=\"line\">                temp.add(k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.add(candidates[i]);</span><br><span class=\"line\">            dfs(candidates, target - candidates[i], temp, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><strong>难度：medium</strong></p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个无重复元素的数组candidates和一个目标数target ，找出candidates中所有可以使数字和为target的组合。<br>candidates中的数字可以无限制重复被选取。</p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>所有数字（包括 target）都是正整数。</li>\n<li>解集不能包含重复的组合。","more":"</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><strong>示例1</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: candidates = [2,3,6,7], target = 7,</span><br><span class=\"line\">所求解集为:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [7],</span><br><span class=\"line\">  [2,2,3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>示例2</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: candidates = [2,3,5], target = 8,</span><br><span class=\"line\">所求解集为:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [2,2,2,2],</span><br><span class=\"line\">  [2,3,3],</span><br><span class=\"line\">  [3,5]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题的思路还是比较清晰的，就是用深度优先遍历+回溯，但是由于解集不能包含重复的组合，即每次遍历应该从当前位置开始，不包含之前的元素。这样才能保证不重复。</p>\n<h3 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; temp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            temp.add(candidates[i]);</span><br><span class=\"line\">            dfs(candidates, target - candidates[i], temp, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target, List&lt;Integer&gt; list, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans.add(list);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; temp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k : list) &#123;</span><br><span class=\"line\">                temp.add(k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.add(candidates[i]);</span><br><span class=\"line\">            dfs(candidates, target - candidates[i], temp, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Leetcode 313: Super Ugly Number","date":"2018-08-22T02:14:13.000Z","_content":"**难度：Medium**\n相似题目：\n* [264. Ugly Number II](https://leetcode.com/problems/ugly-number-ii/description/)\n\n### 题目描述\n编写一段程序来查找第n个超级丑数。\n超级丑数是指其所有质因数都是长度为k的质数列表primes中的正整数。\n<!--more-->\n### 示例\n```shell\n输入: n = 12, primes = [2,7,13,19]\n输出: 32 \n解释: 给定长度为4的质数列表primes = [2,7,13,19]，前12个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32]。\n```\n### 说明\n* 1是任何给定primes的超级丑数。\n* 给定primes中的数字以升序排列。\n* 0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000 \n* 第n个超级丑数确保在32位有符整数范围内\n\n### 解题思路\n这个解题思路是我独自想出来的，后面看讨论区，和其中一个中文解释是差不多的。\n\n主要思路是来模拟这个超级丑数序列的生成过程。首先我们使用ugly数组来保存丑数序列，长度为n，易知ugly[0] = 1, 且结果返回ugly[n-1]即可。\n\n其实生成方式很简单，就是用primes数组中的素数去乘以它之前还未乘过的下标。这需要定义一个primes数组中每个素数该乘以ugly数组中的值的下标。定义这个数组为index，长度和primes数组是一样的，初始化为0。\n\n比如我们现在来求ugly[1]，\n```shell\nprimes[0] * ugly[index[0]] = 2\nprimes[1] * ugly[index[1]] = 7\nprimes[2] * ugly[index[2]] = 13\nprimes[3] * ugly[index[3]] = 19\n```\n我们可以看到最小值是2，则ugly[1] = 2，同时index[0]++，因为后面素数2要乘以ugly下标为1的数，下标为0的数已经计算过了。比如再求一个ugly[2],\n```shell\nprimes[0] * ugly[index[0]] = 4\nprimes[1] * ugly[index[1]] = 7\nprimes[2] * ugly[index[2]] = 13\nprimes[3] * ugly[index[3]] = 19\n```\n最小值是4，所以ugly[2] = 4, 同时index[0]++。\n按照上面的计算过程，可能存在和前一个值相等的情况，此时我们需要把对应下标加到大于前一个数之后，再进行计算。\n\n**这个解法也是可以解决相似题目的。**\n\n也可以看下讨论区相似的题解[Java solution，21ms，详细的中文解释](https://leetcode.com/problems/super-ugly-number/discuss/76292/Java-solution21ms)\n\n### 解题代码\n```Java\nclass Solution {\n    public int nthSuperUglyNumber(int n, int[] primes) {\n        int[] index = new int[primes.length];\n        int[] ugly = new int[n];\n        ugly[0] = 1;\n        for (int i = 1; i < n; i++) {\n            int min = Integer.MAX_VALUE;\n            int tempIndex = -1;\n            for (int j = 0; j < primes.length; j++) {\n                while ((primes[j] * ugly[index[j]]) <= ugly[i-1]) {\n                    index[j]++;\n                }\n                if ((primes[j] * ugly[index[j]]) < min) {\n                    min = primes[j] * ugly[index[j]];\n                    tempIndex = j;\n                }\n            }\n            index[tempIndex]++;\n            ugly[i] = min;\n        }\n        return ugly[n-1];\n    }\n}\n```\n","source":"_posts/Leetcode-313-Super-Ugly-Number.md","raw":"---\nlayout: post\ntitle: 'Leetcode 313: Super Ugly Number'\ncategories: 算法\ndate: 2018-08-22 10:14:13\ntags:\n    - Leetcode\n    - 313\n---\n**难度：Medium**\n相似题目：\n* [264. Ugly Number II](https://leetcode.com/problems/ugly-number-ii/description/)\n\n### 题目描述\n编写一段程序来查找第n个超级丑数。\n超级丑数是指其所有质因数都是长度为k的质数列表primes中的正整数。\n<!--more-->\n### 示例\n```shell\n输入: n = 12, primes = [2,7,13,19]\n输出: 32 \n解释: 给定长度为4的质数列表primes = [2,7,13,19]，前12个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32]。\n```\n### 说明\n* 1是任何给定primes的超级丑数。\n* 给定primes中的数字以升序排列。\n* 0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000 \n* 第n个超级丑数确保在32位有符整数范围内\n\n### 解题思路\n这个解题思路是我独自想出来的，后面看讨论区，和其中一个中文解释是差不多的。\n\n主要思路是来模拟这个超级丑数序列的生成过程。首先我们使用ugly数组来保存丑数序列，长度为n，易知ugly[0] = 1, 且结果返回ugly[n-1]即可。\n\n其实生成方式很简单，就是用primes数组中的素数去乘以它之前还未乘过的下标。这需要定义一个primes数组中每个素数该乘以ugly数组中的值的下标。定义这个数组为index，长度和primes数组是一样的，初始化为0。\n\n比如我们现在来求ugly[1]，\n```shell\nprimes[0] * ugly[index[0]] = 2\nprimes[1] * ugly[index[1]] = 7\nprimes[2] * ugly[index[2]] = 13\nprimes[3] * ugly[index[3]] = 19\n```\n我们可以看到最小值是2，则ugly[1] = 2，同时index[0]++，因为后面素数2要乘以ugly下标为1的数，下标为0的数已经计算过了。比如再求一个ugly[2],\n```shell\nprimes[0] * ugly[index[0]] = 4\nprimes[1] * ugly[index[1]] = 7\nprimes[2] * ugly[index[2]] = 13\nprimes[3] * ugly[index[3]] = 19\n```\n最小值是4，所以ugly[2] = 4, 同时index[0]++。\n按照上面的计算过程，可能存在和前一个值相等的情况，此时我们需要把对应下标加到大于前一个数之后，再进行计算。\n\n**这个解法也是可以解决相似题目的。**\n\n也可以看下讨论区相似的题解[Java solution，21ms，详细的中文解释](https://leetcode.com/problems/super-ugly-number/discuss/76292/Java-solution21ms)\n\n### 解题代码\n```Java\nclass Solution {\n    public int nthSuperUglyNumber(int n, int[] primes) {\n        int[] index = new int[primes.length];\n        int[] ugly = new int[n];\n        ugly[0] = 1;\n        for (int i = 1; i < n; i++) {\n            int min = Integer.MAX_VALUE;\n            int tempIndex = -1;\n            for (int j = 0; j < primes.length; j++) {\n                while ((primes[j] * ugly[index[j]]) <= ugly[i-1]) {\n                    index[j]++;\n                }\n                if ((primes[j] * ugly[index[j]]) < min) {\n                    min = primes[j] * ugly[index[j]];\n                    tempIndex = j;\n                }\n            }\n            index[tempIndex]++;\n            ugly[i] = min;\n        }\n        return ugly[n-1];\n    }\n}\n```\n","slug":"Leetcode-313-Super-Ugly-Number","published":1,"updated":"2020-03-16T15:48:42.234Z","comments":1,"photos":[],"link":"","_id":"ck7unyp8h0006kkiy6ulj49pk","content":"<p><strong>难度：Medium</strong><br>相似题目：</p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/ugly-number-ii/description/\" target=\"_blank\" rel=\"noopener\">264. Ugly Number II</a></li>\n</ul>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>编写一段程序来查找第n个超级丑数。<br>超级丑数是指其所有质因数都是长度为k的质数列表primes中的正整数。</p>\n<a id=\"more\"></a>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: n = 12, primes = [2,7,13,19]</span><br><span class=\"line\">输出: 32 </span><br><span class=\"line\">解释: 给定长度为4的质数列表primes = [2,7,13,19]，前12个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32]。</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>1是任何给定primes的超级丑数。</li>\n<li>给定primes中的数字以升序排列。</li>\n<li>0 &lt; k ≤ 100, 0 &lt; n ≤ 106, 0 &lt; primes[i] &lt; 1000 </li>\n<li>第n个超级丑数确保在32位有符整数范围内</li>\n</ul>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这个解题思路是我独自想出来的，后面看讨论区，和其中一个中文解释是差不多的。</p>\n<p>主要思路是来模拟这个超级丑数序列的生成过程。首先我们使用ugly数组来保存丑数序列，长度为n，易知ugly[0] = 1, 且结果返回ugly[n-1]即可。</p>\n<p>其实生成方式很简单，就是用primes数组中的素数去乘以它之前还未乘过的下标。这需要定义一个primes数组中每个素数该乘以ugly数组中的值的下标。定义这个数组为index，长度和primes数组是一样的，初始化为0。</p>\n<p>比如我们现在来求ugly[1]，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">primes[0] * ugly[index[0]] = 2</span><br><span class=\"line\">primes[1] * ugly[index[1]] = 7</span><br><span class=\"line\">primes[2] * ugly[index[2]] = 13</span><br><span class=\"line\">primes[3] * ugly[index[3]] = 19</span><br></pre></td></tr></table></figure>\n<p>我们可以看到最小值是2，则ugly[1] = 2，同时index[0]++，因为后面素数2要乘以ugly下标为1的数，下标为0的数已经计算过了。比如再求一个ugly[2],</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">primes[0] * ugly[index[0]] = 4</span><br><span class=\"line\">primes[1] * ugly[index[1]] = 7</span><br><span class=\"line\">primes[2] * ugly[index[2]] = 13</span><br><span class=\"line\">primes[3] * ugly[index[3]] = 19</span><br></pre></td></tr></table></figure>\n<p>最小值是4，所以ugly[2] = 4, 同时index[0]++。<br>按照上面的计算过程，可能存在和前一个值相等的情况，此时我们需要把对应下标加到大于前一个数之后，再进行计算。</p>\n<p><strong>这个解法也是可以解决相似题目的。</strong></p>\n<p>也可以看下讨论区相似的题解<a href=\"https://leetcode.com/problems/super-ugly-number/discuss/76292/Java-solution21ms\" target=\"_blank\" rel=\"noopener\">Java solution，21ms，详细的中文解释</a></p>\n<h3 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nthSuperUglyNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[] primes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] index = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[primes.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ugly = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        ugly[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tempIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; primes.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((primes[j] * ugly[index[j]]) &lt;= ugly[i-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    index[j]++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((primes[j] * ugly[index[j]]) &lt; min) &#123;</span><br><span class=\"line\">                    min = primes[j] * ugly[index[j]];</span><br><span class=\"line\">                    tempIndex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index[tempIndex]++;</span><br><span class=\"line\">            ugly[i] = min;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ugly[n-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><strong>难度：Medium</strong><br>相似题目：</p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/ugly-number-ii/description/\" target=\"_blank\" rel=\"noopener\">264. Ugly Number II</a></li>\n</ul>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>编写一段程序来查找第n个超级丑数。<br>超级丑数是指其所有质因数都是长度为k的质数列表primes中的正整数。</p>","more":"<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: n = 12, primes = [2,7,13,19]</span><br><span class=\"line\">输出: 32 </span><br><span class=\"line\">解释: 给定长度为4的质数列表primes = [2,7,13,19]，前12个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32]。</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>1是任何给定primes的超级丑数。</li>\n<li>给定primes中的数字以升序排列。</li>\n<li>0 &lt; k ≤ 100, 0 &lt; n ≤ 106, 0 &lt; primes[i] &lt; 1000 </li>\n<li>第n个超级丑数确保在32位有符整数范围内</li>\n</ul>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这个解题思路是我独自想出来的，后面看讨论区，和其中一个中文解释是差不多的。</p>\n<p>主要思路是来模拟这个超级丑数序列的生成过程。首先我们使用ugly数组来保存丑数序列，长度为n，易知ugly[0] = 1, 且结果返回ugly[n-1]即可。</p>\n<p>其实生成方式很简单，就是用primes数组中的素数去乘以它之前还未乘过的下标。这需要定义一个primes数组中每个素数该乘以ugly数组中的值的下标。定义这个数组为index，长度和primes数组是一样的，初始化为0。</p>\n<p>比如我们现在来求ugly[1]，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">primes[0] * ugly[index[0]] = 2</span><br><span class=\"line\">primes[1] * ugly[index[1]] = 7</span><br><span class=\"line\">primes[2] * ugly[index[2]] = 13</span><br><span class=\"line\">primes[3] * ugly[index[3]] = 19</span><br></pre></td></tr></table></figure>\n<p>我们可以看到最小值是2，则ugly[1] = 2，同时index[0]++，因为后面素数2要乘以ugly下标为1的数，下标为0的数已经计算过了。比如再求一个ugly[2],</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">primes[0] * ugly[index[0]] = 4</span><br><span class=\"line\">primes[1] * ugly[index[1]] = 7</span><br><span class=\"line\">primes[2] * ugly[index[2]] = 13</span><br><span class=\"line\">primes[3] * ugly[index[3]] = 19</span><br></pre></td></tr></table></figure>\n<p>最小值是4，所以ugly[2] = 4, 同时index[0]++。<br>按照上面的计算过程，可能存在和前一个值相等的情况，此时我们需要把对应下标加到大于前一个数之后，再进行计算。</p>\n<p><strong>这个解法也是可以解决相似题目的。</strong></p>\n<p>也可以看下讨论区相似的题解<a href=\"https://leetcode.com/problems/super-ugly-number/discuss/76292/Java-solution21ms\" target=\"_blank\" rel=\"noopener\">Java solution，21ms，详细的中文解释</a></p>\n<h3 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nthSuperUglyNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[] primes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] index = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[primes.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ugly = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        ugly[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tempIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; primes.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((primes[j] * ugly[index[j]]) &lt;= ugly[i-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    index[j]++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((primes[j] * ugly[index[j]]) &lt; min) &#123;</span><br><span class=\"line\">                    min = primes[j] * ugly[index[j]];</span><br><span class=\"line\">                    tempIndex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index[tempIndex]++;</span><br><span class=\"line\">            ugly[i] = min;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ugly[n-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Leetcode 49: Group Anagrams","date":"2018-08-02T06:41:07.000Z","_content":"### 题目描述\n给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。\n\n<!-- more -->\n\n### 示例\n```shell\n输入: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\n输出:\n[\n  [\"ate\",\"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\n```\n\n### 说明\n* 所有输入均为小写字母。\n* 不考虑答案输出的顺序。\n\n### 解题思路\n这道题在昨天在牛客网上看面经看到的，今天来做做。\n\n这是一道关于字符串的题目，可以采用hash的方式，把字符串按照字母顺序与相应的个数组合在一起生成key，然后将key相同的放在一起。题目还是比较简单。\n\n如果只要求字符串含有的字母相同的话，可以不计算字母个数。\n\n### 解题代码\n```Java\nclass Solution {\n    \n    public List<List<String>> groupAnagrams(String[] strs) {\n        HashMap<String, List<String>> hash = new HashMap<>();\n        for (String str : strs) {\n            String key = getKey(str);\n            if (hash.containsKey(key)) {\n                hash.get(key).add(str);\n            } else {\n                List<String> tmp = new LinkedList<String>();\n                tmp.add(str);\n                hash.put(key, tmp);\n            }\n        }\n        List<List<String>> ans = new LinkedList<>();\n        for (String key : hash.keySet()) {\n            ans.add(hash.get(key));\n        }\n        return ans;\n    }\n    \n    public String getKey(String str) {\n        StringBuffer sb = new StringBuffer();\n        int[] alph = new int[26];\n        char[] charArray = str.toCharArray();\n        for (char c : charArray) {\n            alph[c-'a'] += 1;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (alph[i] > 0) {\n                sb.append((char)(i+'a'));\n                sb.append(alph[i]);\n            }\n        }\n        return sb.toString();\n    }\n}\n```","source":"_posts/Leetcode-49-Group-Anagrams.md","raw":"---\nlayout: post\ntitle: 'Leetcode 49: Group Anagrams'\ncategories: 算法\ndate: 2018-08-02 14:41:07\ntags:\n    - Leetcode\n    - 算法\n    - 哈希表\n    - 字符串\n---\n### 题目描述\n给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。\n\n<!-- more -->\n\n### 示例\n```shell\n输入: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\n输出:\n[\n  [\"ate\",\"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\n```\n\n### 说明\n* 所有输入均为小写字母。\n* 不考虑答案输出的顺序。\n\n### 解题思路\n这道题在昨天在牛客网上看面经看到的，今天来做做。\n\n这是一道关于字符串的题目，可以采用hash的方式，把字符串按照字母顺序与相应的个数组合在一起生成key，然后将key相同的放在一起。题目还是比较简单。\n\n如果只要求字符串含有的字母相同的话，可以不计算字母个数。\n\n### 解题代码\n```Java\nclass Solution {\n    \n    public List<List<String>> groupAnagrams(String[] strs) {\n        HashMap<String, List<String>> hash = new HashMap<>();\n        for (String str : strs) {\n            String key = getKey(str);\n            if (hash.containsKey(key)) {\n                hash.get(key).add(str);\n            } else {\n                List<String> tmp = new LinkedList<String>();\n                tmp.add(str);\n                hash.put(key, tmp);\n            }\n        }\n        List<List<String>> ans = new LinkedList<>();\n        for (String key : hash.keySet()) {\n            ans.add(hash.get(key));\n        }\n        return ans;\n    }\n    \n    public String getKey(String str) {\n        StringBuffer sb = new StringBuffer();\n        int[] alph = new int[26];\n        char[] charArray = str.toCharArray();\n        for (char c : charArray) {\n            alph[c-'a'] += 1;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (alph[i] > 0) {\n                sb.append((char)(i+'a'));\n                sb.append(alph[i]);\n            }\n        }\n        return sb.toString();\n    }\n}\n```","slug":"Leetcode-49-Group-Anagrams","published":1,"updated":"2020-03-16T15:46:28.432Z","comments":1,"photos":[],"link":"","_id":"ck7unyp8i0008kkiy7l866z3h","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [\"ate\",\"eat\",\"tea\"],</span><br><span class=\"line\">  [\"nat\",\"tan\"],</span><br><span class=\"line\">  [\"bat\"]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>所有输入均为小写字母。</li>\n<li>不考虑答案输出的顺序。</li>\n</ul>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题在昨天在牛客网上看面经看到的，今天来做做。</p>\n<p>这是一道关于字符串的题目，可以采用hash的方式，把字符串按照字母顺序与相应的个数组合在一起生成key，然后将key相同的放在一起。题目还是比较简单。</p>\n<p>如果只要求字符串含有的字母相同的话，可以不计算字母个数。</p>\n<h3 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class=\"line\">        HashMap&lt;String, List&lt;String&gt;&gt; hash = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String str : strs) &#123;</span><br><span class=\"line\">            String key = getKey(str);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hash.containsKey(key)) &#123;</span><br><span class=\"line\">                hash.get(key).add(str);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                List&lt;String&gt; tmp = <span class=\"keyword\">new</span> LinkedList&lt;String&gt;();</span><br><span class=\"line\">                tmp.add(str);</span><br><span class=\"line\">                hash.put(key, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; ans = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : hash.keySet()) &#123;</span><br><span class=\"line\">            ans.add(hash.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getKey</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] alph = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] charArray = str.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : charArray) &#123;</span><br><span class=\"line\">            alph[c-<span class=\"string\">'a'</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (alph[i] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                sb.append((<span class=\"keyword\">char</span>)(i+<span class=\"string\">'a'</span>));</span><br><span class=\"line\">                sb.append(alph[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>","more":"<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [\"ate\",\"eat\",\"tea\"],</span><br><span class=\"line\">  [\"nat\",\"tan\"],</span><br><span class=\"line\">  [\"bat\"]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>所有输入均为小写字母。</li>\n<li>不考虑答案输出的顺序。</li>\n</ul>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题在昨天在牛客网上看面经看到的，今天来做做。</p>\n<p>这是一道关于字符串的题目，可以采用hash的方式，把字符串按照字母顺序与相应的个数组合在一起生成key，然后将key相同的放在一起。题目还是比较简单。</p>\n<p>如果只要求字符串含有的字母相同的话，可以不计算字母个数。</p>\n<h3 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class=\"line\">        HashMap&lt;String, List&lt;String&gt;&gt; hash = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String str : strs) &#123;</span><br><span class=\"line\">            String key = getKey(str);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hash.containsKey(key)) &#123;</span><br><span class=\"line\">                hash.get(key).add(str);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                List&lt;String&gt; tmp = <span class=\"keyword\">new</span> LinkedList&lt;String&gt;();</span><br><span class=\"line\">                tmp.add(str);</span><br><span class=\"line\">                hash.put(key, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; ans = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : hash.keySet()) &#123;</span><br><span class=\"line\">            ans.add(hash.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getKey</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] alph = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] charArray = str.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : charArray) &#123;</span><br><span class=\"line\">            alph[c-<span class=\"string\">'a'</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (alph[i] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                sb.append((<span class=\"keyword\">char</span>)(i+<span class=\"string\">'a'</span>));</span><br><span class=\"line\">                sb.append(alph[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Leetcode 56: Merge Intervals","date":"2018-08-24T02:44:23.000Z","_content":"**难度：Medium**\n### 题目描述\n给出一个区间的集合，请合并所有重叠的区间。\n\n### 示例\n**示例1**\n```shell\n输入: [[1,3],[2,6],[8,10],[15,18]]\n输出: [[1,6],[8,10],[15,18]]\n解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n```\n<!--more-->\n\n**示例2**\n```shell\n输入: [[1,4],[4,5]]\n输出: [[1,5]]\n解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。\n```\n\n### 解题思路\n昨天在做keep笔试题的时候有一道编程题和这很相似，后面听同学说了下，然后来把这道题做了。\n\n这个题思路还是比较简单的，主要是要对区间进行排序，如果是Java语言的话，就是主要考察了比较器的操作。将区间排序后，然后再进行合并就可以了。合并的时候需要注意两点：\n* 可能存在多个区间进行合并，并不止示例中的两个区间\n* 可能前一个区间的end大于后一个区间的end，所以合并时需要比较两个区间end的大小。\n\n### 解题代码\n```Java\n/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\nclass Solution {\n    public List<Interval> merge(List<Interval> intervals) {\n        List<Interval> ans = new LinkedList<>();\n        if (intervals == null || intervals.size() == 0) {\n            return ans;\n        }\n        Collections.sort(intervals, new Comparator<Interval>(){\n            @Override\n            public int compare(Interval inte1, Interval inte2) {\n                if (inte1.start == inte2.start) return inte1.end - inte2.end;\n                return inte1.start - inte2.start;\n            }\n        });\n        ans.add(intervals.get(0));\n        for (int i = 1; i < intervals.size(); i++) {\n            Interval last = ans.get(ans.size() - 1);\n            if (last.end >= intervals.get(i).start) {\n                ans.remove(last);\n                ans.add(new Interval(last.start, Math.max(last.end,intervals.get(i).end)));\n            } else {\n                ans.add(intervals.get(i));\n            }\n        }\n        return ans;\n    }\n}\n\n```","source":"_posts/Leetcode-56-Merge-Intervals.md","raw":"---\nlayout: post\ntitle: 'Leetcode 56: Merge Intervals'\ncategories: 算法\ndate: 2018-08-24 10:44:23\ntags:\n    - leetcode\n    - 56\n    - Array\n---\n**难度：Medium**\n### 题目描述\n给出一个区间的集合，请合并所有重叠的区间。\n\n### 示例\n**示例1**\n```shell\n输入: [[1,3],[2,6],[8,10],[15,18]]\n输出: [[1,6],[8,10],[15,18]]\n解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n```\n<!--more-->\n\n**示例2**\n```shell\n输入: [[1,4],[4,5]]\n输出: [[1,5]]\n解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。\n```\n\n### 解题思路\n昨天在做keep笔试题的时候有一道编程题和这很相似，后面听同学说了下，然后来把这道题做了。\n\n这个题思路还是比较简单的，主要是要对区间进行排序，如果是Java语言的话，就是主要考察了比较器的操作。将区间排序后，然后再进行合并就可以了。合并的时候需要注意两点：\n* 可能存在多个区间进行合并，并不止示例中的两个区间\n* 可能前一个区间的end大于后一个区间的end，所以合并时需要比较两个区间end的大小。\n\n### 解题代码\n```Java\n/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\nclass Solution {\n    public List<Interval> merge(List<Interval> intervals) {\n        List<Interval> ans = new LinkedList<>();\n        if (intervals == null || intervals.size() == 0) {\n            return ans;\n        }\n        Collections.sort(intervals, new Comparator<Interval>(){\n            @Override\n            public int compare(Interval inte1, Interval inte2) {\n                if (inte1.start == inte2.start) return inte1.end - inte2.end;\n                return inte1.start - inte2.start;\n            }\n        });\n        ans.add(intervals.get(0));\n        for (int i = 1; i < intervals.size(); i++) {\n            Interval last = ans.get(ans.size() - 1);\n            if (last.end >= intervals.get(i).start) {\n                ans.remove(last);\n                ans.add(new Interval(last.start, Math.max(last.end,intervals.get(i).end)));\n            } else {\n                ans.add(intervals.get(i));\n            }\n        }\n        return ans;\n    }\n}\n\n```","slug":"Leetcode-56-Merge-Intervals","published":1,"updated":"2020-03-16T15:47:46.374Z","comments":1,"photos":[],"link":"","_id":"ck7unyp8j0009kkiy9rzdc2hh","content":"<p><strong>难度：Medium</strong></p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给出一个区间的集合，请合并所有重叠的区间。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><strong>示例1</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class=\"line\">输出: [[1,6],[8,10],[15,18]]</span><br><span class=\"line\">解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<p><strong>示例2</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [[1,4],[4,5]]</span><br><span class=\"line\">输出: [[1,5]]</span><br><span class=\"line\">解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>昨天在做keep笔试题的时候有一道编程题和这很相似，后面听同学说了下，然后来把这道题做了。</p>\n<p>这个题思路还是比较简单的，主要是要对区间进行排序，如果是Java语言的话，就是主要考察了比较器的操作。将区间排序后，然后再进行合并就可以了。合并的时候需要注意两点：</p>\n<ul>\n<li>可能存在多个区间进行合并，并不止示例中的两个区间</li>\n<li>可能前一个区间的end大于后一个区间的end，所以合并时需要比较两个区间end的大小。</li>\n</ul>\n<h3 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for an interval.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Interval &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int start;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int end;</span></span><br><span class=\"line\"><span class=\"comment\"> *     Interval() &#123; start = 0; end = 0; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Interval&gt; <span class=\"title\">merge</span><span class=\"params\">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Interval&gt; ans = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intervals == <span class=\"keyword\">null</span> || intervals.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Collections.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;Interval&gt;()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Interval inte1, Interval inte2)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (inte1.start == inte2.start) <span class=\"keyword\">return</span> inte1.end - inte2.end;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> inte1.start - inte2.start;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ans.add(intervals.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.size(); i++) &#123;</span><br><span class=\"line\">            Interval last = ans.get(ans.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (last.end &gt;= intervals.get(i).start) &#123;</span><br><span class=\"line\">                ans.remove(last);</span><br><span class=\"line\">                ans.add(<span class=\"keyword\">new</span> Interval(last.start, Math.max(last.end,intervals.get(i).end)));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans.add(intervals.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><strong>难度：Medium</strong></p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给出一个区间的集合，请合并所有重叠的区间。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><strong>示例1</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class=\"line\">输出: [[1,6],[8,10],[15,18]]</span><br><span class=\"line\">解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><br></pre></td></tr></table></figure>","more":"<p><strong>示例2</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [[1,4],[4,5]]</span><br><span class=\"line\">输出: [[1,5]]</span><br><span class=\"line\">解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>昨天在做keep笔试题的时候有一道编程题和这很相似，后面听同学说了下，然后来把这道题做了。</p>\n<p>这个题思路还是比较简单的，主要是要对区间进行排序，如果是Java语言的话，就是主要考察了比较器的操作。将区间排序后，然后再进行合并就可以了。合并的时候需要注意两点：</p>\n<ul>\n<li>可能存在多个区间进行合并，并不止示例中的两个区间</li>\n<li>可能前一个区间的end大于后一个区间的end，所以合并时需要比较两个区间end的大小。</li>\n</ul>\n<h3 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for an interval.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Interval &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int start;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int end;</span></span><br><span class=\"line\"><span class=\"comment\"> *     Interval() &#123; start = 0; end = 0; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Interval&gt; <span class=\"title\">merge</span><span class=\"params\">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Interval&gt; ans = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intervals == <span class=\"keyword\">null</span> || intervals.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Collections.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;Interval&gt;()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Interval inte1, Interval inte2)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (inte1.start == inte2.start) <span class=\"keyword\">return</span> inte1.end - inte2.end;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> inte1.start - inte2.start;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ans.add(intervals.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.size(); i++) &#123;</span><br><span class=\"line\">            Interval last = ans.get(ans.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (last.end &gt;= intervals.get(i).start) &#123;</span><br><span class=\"line\">                ans.remove(last);</span><br><span class=\"line\">                ans.add(<span class=\"keyword\">new</span> Interval(last.start, Math.max(last.end,intervals.get(i).end)));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans.add(intervals.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck7unyp8i0008kkiy7l866z3h","category_id":"ck7unyp8f0004kkiy6ykfb399","_id":"ck7unyp8l000ckkiy2ja9bms9"},{"post_id":"ck7unyp860000kkiy1mz186hu","category_id":"ck7unyp8f0004kkiy6ykfb399","_id":"ck7unyp8m000fkkiy97z68rmi"},{"post_id":"ck7unyp8j0009kkiy9rzdc2hh","category_id":"ck7unyp8f0004kkiy6ykfb399","_id":"ck7unyp8m000gkkiyboxn02xw"},{"post_id":"ck7unyp8d0002kkiy8fo58jlr","category_id":"ck7unyp8f0004kkiy6ykfb399","_id":"ck7unyp8n000ikkiy7c6759p3"},{"post_id":"ck7unyp8h0006kkiy6ulj49pk","category_id":"ck7unyp8f0004kkiy6ykfb399","_id":"ck7unyp8n000kkkiyfq9a90jm"}],"PostTag":[{"post_id":"ck7unyp860000kkiy1mz186hu","tag_id":"ck7unyp8g0005kkiy4ma77zya","_id":"ck7unyp8n000jkkiy5uj660y3"},{"post_id":"ck7unyp860000kkiy1mz186hu","tag_id":"ck7unyp8j000bkkiy1kn3c3jm","_id":"ck7unyp8n000lkkiy8oq6ezfc"},{"post_id":"ck7unyp860000kkiy1mz186hu","tag_id":"ck7unyp8m000ekkiy3d9d6e6w","_id":"ck7unyp8n000nkkiyaeyw5vew"},{"post_id":"ck7unyp8d0002kkiy8fo58jlr","tag_id":"ck7unyp8g0005kkiy4ma77zya","_id":"ck7unyp8o000pkkiy1qqe2qd4"},{"post_id":"ck7unyp8d0002kkiy8fo58jlr","tag_id":"ck7unyp8n000mkkiyexr7d6d8","_id":"ck7unyp8o000qkkiy8v8m1sut"},{"post_id":"ck7unyp8h0006kkiy6ulj49pk","tag_id":"ck7unyp8o000okkiydqoabt5v","_id":"ck7unyp8p000tkkiy1h4eh1pk"},{"post_id":"ck7unyp8h0006kkiy6ulj49pk","tag_id":"ck7unyp8o000rkkiyes7sf8gp","_id":"ck7unyp8q000ukkiyhqmr1sds"},{"post_id":"ck7unyp8i0008kkiy7l866z3h","tag_id":"ck7unyp8o000okkiydqoabt5v","_id":"ck7unyp8t000zkkiyard82g4k"},{"post_id":"ck7unyp8i0008kkiy7l866z3h","tag_id":"ck7unyp8j000bkkiy1kn3c3jm","_id":"ck7unyp8t0010kkiyctawf2kl"},{"post_id":"ck7unyp8i0008kkiy7l866z3h","tag_id":"ck7unyp8q000wkkiy9kgj8r47","_id":"ck7unyp8t0012kkiyanrv519b"},{"post_id":"ck7unyp8i0008kkiy7l866z3h","tag_id":"ck7unyp8s000xkkiy29gj58hf","_id":"ck7unyp8t0013kkiy464vesnn"},{"post_id":"ck7unyp8j0009kkiy9rzdc2hh","tag_id":"ck7unyp8g0005kkiy4ma77zya","_id":"ck7unyp8u0014kkiy5hrdhptm"},{"post_id":"ck7unyp8j0009kkiy9rzdc2hh","tag_id":"ck7unyp8s000ykkiyhluc9zse","_id":"ck7unyp8u0015kkiyg2l527qq"},{"post_id":"ck7unyp8j0009kkiy9rzdc2hh","tag_id":"ck7unyp8t0011kkiy612f0qkd","_id":"ck7unyp8u0016kkiy069c35y5"}],"Tag":[{"name":"leetcode","_id":"ck7unyp8g0005kkiy4ma77zya"},{"name":"算法","_id":"ck7unyp8j000bkkiy1kn3c3jm"},{"name":"Linked List","_id":"ck7unyp8m000ekkiy3d9d6e6w"},{"name":"backtracking","_id":"ck7unyp8n000mkkiyexr7d6d8"},{"name":"Leetcode","_id":"ck7unyp8o000okkiydqoabt5v"},{"name":"313","_id":"ck7unyp8o000rkkiyes7sf8gp"},{"name":"哈希表","_id":"ck7unyp8q000wkkiy9kgj8r47"},{"name":"字符串","_id":"ck7unyp8s000xkkiy29gj58hf"},{"name":"56","_id":"ck7unyp8s000ykkiyhluc9zse"},{"name":"Array","_id":"ck7unyp8t0011kkiy612f0qkd"}]}}